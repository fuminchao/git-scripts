#!/bin/bash

CMD_ARGS=$@

type parallel >> /dev/null
if [ !"$?" = "0" ]; then
    echo "parallel ?"
    exit 1;
fi

# GITALL_RECURSIVE_DEPTH
# GITALL_CONCURRENT
# GITALL_NO_COLOR

[ -z "$GITALL_CONCURRENT" ] && GITALL_CONCURRENT=5
[ -z "$GITALL_RECURSIVE_DEPTH" ] && GITALL_RECURSIVE_DEPTH=10
[ ! -t 1 ] && GITALL_NO_COLOR=Y

if [ ! "$GITALL_NO_COLOR" = "Y" ]; then
    export COLOR_LIGHT_RED='\e[1;31m'
    export COLOR_LIGHT_GREEN='\e[1;32m'
    export COLOR_BLUE='\e[0;34m'
    export COLOR_LIGHT_BLUE='\e[1;34m'
    export COLOR_YELLOW='\e[1;33m'
    export COLOR_LIGHT_PURPLE='\e[1;35m'
    export COLOR_NC='\e[0m'
fi

function printGit() {
    IDX=`echo $1|cut -d\  -f1`
    DIR=`echo $1|cut -d\  -f2`

    cd $DIR
    printf \
        "$COLOR_LIGHT_PURPLE%s$COLOR_NC $COLOR_LIGHT_BLUE%s$COLOR_NC %s $COLOR_LIGHT_BLUE%s$COLOR_NC $COLOR_YELLOW%s$COLOR_NC" \
        "$IDX" \
        "`pwd`" "<=>" \
        "`git remote --verbose | grep fetch | cut -d ' ' -f1 | cut -f2`" \
        "`git branch | grep -E "^\*" | cut -d ' ' -f2`"
    echo
}
export -f printGit

REPO_DIR=()
while read -r
do
    if [ -e "$REPLY/.git" ]; then
        REPO_DIR+=("$REPLY")
    fi
done << EOF
`find . -maxdepth $GITALL_RECURSIVE_DEPTH -type d | sort -u`
EOF

function loopGit() {
    cnt=${#REPO_DIR[@]}
    for i in `seq ${#REPO_DIR[@]}`
    do
        xi=0000000000$i
        li=${#cnt}
        xi=${xi:n-li}
        echo -en "$xi/${cnt} ${REPO_DIR[i - 1]}\0"
    done
}

loopGit | parallel -0 --no-notice -j${GITALL_CONCURRENT} --keep-order "printGit {}; $CMD_ARGS"
